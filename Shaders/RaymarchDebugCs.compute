#pragma kernel CSMain

#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Math.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/SDF.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Operation.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Raymarch.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/BVH.hlsl"

#define B float3(0.0, 0.3, 1.0)
#define Y float3(1.0, 0.8, 0.0)

struct Shape
{
    int groupId;
    int id;
    float4x4 transform;
    float3 lossyScale;
    int type;
    float3 size;
    float roundness;
    int operation;
    float smoothness;
    float4 color;
    float4 emissionColor;
    float emissionIntensity;
};

float screenWidth;
float screenHeight;
float4 cameraPosition;
float4x4 cameraToWorld;
float4x4 inverseProjectionMatrix;
float4x4 viewProjectionMatrix;

int debugMode;
int maxSteps;
int maxDistance;
int shapeCount;
StructuredBuffer<Shape> shapeBuffer;

int hitCount = 0;
int hitIds[RAY_MAX_HITS];

float4 color;
RWTexture2D<float4> resultTexture;

inline float BlendDistance(inout float totalDist, const float3 pos, const Shape shape)
{
    float dist = GetShapeSDF(pos, shape.type, shape.size, shape.roundness);
    float blend = 0;
    totalDist = CombineShapes(totalDist, dist, shape.operation, shape.smoothness, blend);
    return blend;
}

inline float Map(inout Ray ray)
{
    float totalDist = maxDistance;
    float4 localColor =  shapeBuffer[hitIds[0]].color;
    
    for (int i = 0; i < shapeCount; i++)
    {
        // Shape shape = shapeBuffer[i];
        Shape shape = shapeBuffer[hitIds[i]];
        float3 pos = NormalizeScale(ApplyMatrix(ray.hitPoint, shape.transform), shape.lossyScale);
        float blend = BlendDistance(totalDist, pos, shape);
        localColor = lerp(localColor, shape.color + shape.emissionColor * shape.emissionIntensity, blend);
    }
    color = localColor;
    return totalDist;
}

inline float NormalMap(const float3 rayPos)
{
    float totalDist = maxDistance;
    
    for (int i = 0; i < shapeCount; i++)
    {
        Shape shape = shapeBuffer[hitIds[i]];
        float3 pos = NormalizeScale(ApplyMatrix(rayPos, shape.transform), shape.lossyScale);
        BlendDistance(totalDist, pos, shape);
    }
    return totalDist;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const float2 uv = float2(id.xy) / float2(screenWidth, screenHeight);
    const float2 ndc = uv * 2.0 - 1.0;

    const float4 posCS = float4(ndc, 0.0, 1.0);
    float4 posVS = mul(inverseProjectionMatrix, posCS);
    posVS /= posVS.w;
    
    float4 posWS = mul(cameraToWorld, posVS);
    float3 rayDirWS = normalize(posWS.xyz - cameraPosition.xyz);
    Ray ray = CreateRay(posWS.xyz, rayDirWS, maxSteps, maxDistance);

    TraverseAabbTree(ray, hitIds, hitCount);
    
    int count = 0;
    //RaymarchHitCount(ray, count);

    switch (debugMode)
    {
    case 1:
        color = ray.lastHitDistance > EPSILON ? 0 : color;
        break;
    case 2:
        color = ray.lastHitDistance > EPSILON ? 0 : float4(GetNormal(ray.hitPoint) * 0.5 + 0.5, 1);
        break;
    case 3:
        color = float4(GetHitMap(count, ray.maxSteps), 1);
        break;
    case 4:
        if (hitCount > 1)
        {
            float4 boxColor = float4(1.0, 1.0, 1.0, 0.01);
            float intensity = saturate((float)hitCount / 5.0);
            color = float4(intensity, intensity, intensity, 1.0);
        }
        else if (hitCount == 1)
        {
            color = float4(1, 0, 0, 1);
        }
        else
        {
            color = 0;
        };
        break;
    }
    resultTexture[id.xy] = color;
}
