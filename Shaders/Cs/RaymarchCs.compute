#pragma kernel CSMain
#pragma target 5.0

#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Math.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Operation.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Raymarch.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Library/Core/Bvh.hlsl"
#include "Packages/com.davidkimighty.rayman/Shaders/Shared/Shape.hlsl"

struct Shape
{
    int type;
    float4x4 transform;
    float3 size;
    float3 pivot;
    int operation;
    float blend;
    float roundness;
    float4 color;
};

float _ScreenWidth;
float _ScreenHeight;
float _RenderScale;
float4 _CameraPosition;
float4x4 _CameraToWorld;
float4x4 _InverseProjectionMatrix;
float4x4 _ViewProjectionMatrix;

float _EpsilonMin;
float _EpsilonMax;
int _MaxSteps;
float _MaxDistance;

StructuredBuffer<Shape> _ShapeBuffer;
StructuredBuffer<NodeAabb> _NodeBuffer;
RWTexture2D<float4> _ResultTexture;

int2 hitCount; // x is leaf
int hitIds[RAY_MAX_HITS];
float4 color;

inline float2 CombineDistance(float3 posWS, Shape shape, float totalDist)
{
    float3 posOS = mul(shape.transform, float4(posWS, 1.0)).xyz;
    posOS -= GetPivotOffset(shape.type, shape.pivot, shape.size);
			
    float3 scale = GetScale(shape.transform);
    float scaleFactor = min(scale.x, min(scale.y, scale.z));

    float dist = GetShapeSdf(posOS, shape.type, shape.size, shape.roundness) / scaleFactor;
    return SmoothOperation(shape.operation, totalDist, dist, shape.blend);
}

float Map(const float3 positionWS)
{
    float totalDist = _MaxDistance;
    color = _ShapeBuffer[hitIds[0]].color;
			
    for (int i = 0; i < hitCount.x; i++)
    {
        Shape shape = _ShapeBuffer[hitIds[i]];
        float2 combined = CombineDistance(positionWS, shape, totalDist);
        totalDist = combined.x;
        color = lerp(color, shape.color, combined.y);
    }
    return totalDist;
}

float NormalMap(const float3 positionWS)
{
    float totalDist = _MaxDistance;
    for (int i = 0; i < hitCount.x; i++)
        totalDist = CombineDistance(positionWS, _ShapeBuffer[hitIds[i]], totalDist).x;
    return totalDist;
}

inline NodeAabb GetNode(const int index)
{
    return _NodeBuffer[index];
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const float2 uv = float2(id.xy) / (float2(_ScreenWidth, _ScreenHeight) * _RenderScale);
    const float2 ndc = uv * 2.0 - 1.0;

    const float4 posCS = float4(ndc, 0.0, 1.0);
    float4 posVS = mul(_InverseProjectionMatrix, posCS);
    posVS /= posVS.w;
    
    float4 posWS = mul(_CameraToWorld, posVS);
    float3 rayDirWS = normalize(posWS.xyz - _CameraPosition.xyz);
    Ray ray = CreateRay(posWS.xyz, rayDirWS, float2(_EpsilonMin, _EpsilonMax), _MaxSteps, _MaxDistance);
    ray.distanceTravelled = length(ray.hitPoint - _CameraPosition.xyz);

    hitCount = GetHitIds(0, ray, hitIds);
    InsertionSort(hitIds, hitCount.x);
    Raymarch(ray);
    
    color = ray.hitDistance > ray.epsilon.z ? 0 : color;
    _ResultTexture[id.xy] = color;
}
